package captureEasy.UI;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FileDialog;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Image;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Random;

import javax.imageio.ImageIO;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.InputMap;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JTabbedPane;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.border.BevelBorder;
import javax.swing.border.LineBorder;
import javax.swing.border.MatteBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

import captureEasy.Library.Library;
import captureEasy.UI.PopUp;
import captureEasy.UI.Part.ManageDocumentPanel;
import captureEasy.UI.Part.SettingsPanel;
import captureEasy.UI.Part.ViewPanel;

import javax.swing.JProgressBar;
import java.awt.event.MouseAdapter;
import java.awt.event.KeyEvent;
import javax.swing.JComboBox;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

public class ActionGUI extends Library  implements MouseListener,MouseMotionListener,ChangeListener
{
	public static JDialog dialog;
	public final JPanel contentPanel = new JPanel();
	final ButtonGroup g = new ButtonGroup();
	public JTabbedPane TabbledPanel;
	public boolean finish=false;
	public final String PRE_HTML = "<html>"
			+ "<p style=\"text-align: center; "
			+ "margin-top: 10px;"
			+ "margin-bottom: 10px;"
			+ "margin-left: 1px;"
			+ "margin-right: 1px;"
			+ "width: 70px\">";
	public final String POST_HTML = "</p></html>";
	int xx,xy,Xlocation,Ylocation;
	Dimension size;
	SensorGUI sen =null;
	public JPanel SettingsPane;
	public JTextField textField_DocumentDestinationPath;
	public JRadioButton SettingsPane_DocFolderPanel_DocDest;
	public JPanel SettingsPane_DocFolderPanel;
	public JTextField SettingsPane_DocFolderPanel_textField_DocDestFolder;
	public ButtonGroup buttonGroup= new ButtonGroup();
	public JPanel SettingsPane_FramePanel;
	public ButtonGroup buttonGroup_1= new ButtonGroup();
	public String newFileName="";
	public String existingfilepath="";
	public JButton btnDone;
	public JPanel SaveScrollPane;
	public JPanel ViewScrollPane;
	public JPanel DocumentScrollPane;
	public JPanel SettingsScrollPane;
	public JPanel SavePanel;
	public JLabel lblChooseFile;
	public JButton btnNewButton;
	public JCheckBox chckbxOverwriteSelectedFile;
	public JLabel lblEnterFilename;
	public JTextField textField_Filename;
	public JPanel panel_1;
	public JPanel panel_Input;
	public JRadioButton rdbtnNewDoc;
	public JRadioButton rdbtnSavePDF;
	public JRadioButton rdbtnExDoc;
	public String FolderPath;
	public static boolean leaveControl=true;
	public JPanel panel_Progress;
	public JPanel panel_Save_Buttons;
	public JLabel label_1;
	public JButton btnUpdateFrameLocation;
	public static JProgressBar ProgressBar;

	public static JLabel lblLocationx;
	JFileChooser fileChooser;



	@SuppressWarnings({ "rawtypes", "unchecked" })
	public ActionGUI(int TabId)
	{
		leaveControl=false;
		dialog=new JDialog();
		dialog.setSize(new Dimension(575, 350));
		dialog.setTitle("	           Action");
		dialog.setFont(new Font("Dialog", 1, 20));
		dialog.setAlwaysOnTop(true);
		dialog.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
		dialog.setBounds(screensize.width / 2 - 300, screensize.height / 2 - 300, 575, 350);
		dialog.setUndecorated(true);
		dialog.setLocation(screensize.width / 2 - 300, screensize.height / 2 - 300);
		dialog.getContentPane().setLayout(new BorderLayout());
		InputMap im = dialog.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		ActionMap am = dialog.getRootPane().getActionMap();

		im.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), "escape");
		am.put("escape", new AbstractAction() {
			public static final long serialVersionUID = 1L;

			@Override
			public void actionPerformed(ActionEvent e) {
				if((getProperty(PropertyFilePath,"DocPath")!=null) || !(TabbledPanel.getSelectedIndex()==4))
				{
					dialog.dispose();
					leaveControl=true;
				}
			}
		});
		contentPanel.setSize(new Dimension(575, 350));
		contentPanel.setBackground(new Color(127, 255, 212));
		this.contentPanel.setFont(new Font("Tahoma", 0, 18));
		this.contentPanel.setBorder(new MatteBorder(1, 1, 1, 1, (Color) new Color(0, 0, 0)));
		dialog.getContentPane().add(this.contentPanel, "Center");
		dialog.addMouseListener(this);
		dialog.addMouseMotionListener(this);
		{
			TabbledPanel = new JTabbedPane(JTabbedPane.LEFT);
			TabbledPanel.setSize(new Dimension(551, 324));
			TabbledPanel.setBorder(new MatteBorder(1, 1, 1, 1, (Color) new Color(0, 0, 0)));
			TabbledPanel.setBounds(12, 13, 551, 324);
			TabbledPanel.setBackground(new Color(255, 255, 255));
			TabbledPanel.setOpaque(true);
			TabbledPanel.setAutoscrolls(true);
			TabbledPanel.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);
			TabbledPanel.setFont(new Font("Tahoma", Font.BOLD, 16));
			TabbledPanel.setPreferredSize(new Dimension(550, 260));
			TabbledPanel.addMouseListener(this);
			TabbledPanel.addChangeListener(this);
			TabbledPanel.addMouseMotionListener(this);
			contentPanel.setLayout(null);
			contentPanel.add(TabbledPanel);

			{
				SavePanel = new JPanel();
				SavePanel.setBorder(new MatteBorder(1, 1, 0, 1, (Color) new Color(0, 0, 0)));
				SavePanel.setBounds(12, 12, 413, 250);
				SavePanel.addMouseListener(this);
				SavePanel.addMouseMotionListener(this);
				SavePanel.setPreferredSize(new Dimension(350, 100));
				SaveScrollPane=new JPanel();
				SaveScrollPane.setBorder(new MatteBorder(1, 1, 1, 1, (Color) new Color(0, 0, 0)));
				SaveScrollPane.setBackground(new Color(255, 255, 255));
				SaveScrollPane.setLayout(null);
				SaveScrollPane.add(SavePanel);
				SavePanel.setLayout(null);
				JLabel label = new JLabel("Please Select :  ");
				label.setPreferredSize(new Dimension(400, 2));
				label.setHorizontalTextPosition(SwingConstants.CENTER);
				label.setHorizontalAlignment(SwingConstants.CENTER);
				label.setFont(new Font("Tahoma", Font.PLAIN, 18));
				label.setBounds(0, 2, 415, 35);
				SavePanel.add(label);

				rdbtnNewDoc = new JRadioButton();
				g.add(rdbtnNewDoc);
				rdbtnNewDoc.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent arg0) 
					{
						panel_Input.setBounds(28, 162, 365, 70);

						rdbtnNewDoc.setEnabled(false);
						rdbtnExDoc.setEnabled(true);
						rdbtnSavePDF.setEnabled(true);

						lblEnterFilename.setVisible(true);
						textField_Filename.setVisible(true);
						textField_Filename.requestFocusInWindow();

						textField_Filename.setText("");
						existingfilepath="";
						newFileName="";
						btnNewButton.setBackground(Color.WHITE);

						lblChooseFile.setVisible(false);
						btnNewButton.setVisible(false);
						chckbxOverwriteSelectedFile.setVisible(false);

						btnDone.setEnabled(false);
					}
				});
				rdbtnNewDoc.setText("Add to New Microsoft Word Document");
				rdbtnNewDoc.setSelected(true);
				rdbtnNewDoc.setPreferredSize(new Dimension(400, 25));
				rdbtnNewDoc.setFont(new Font("Tahoma", Font.BOLD, 16));
				rdbtnNewDoc.setFocusable(true);
				rdbtnNewDoc.setBounds(18, 45, 375, 35);
				SavePanel.add(rdbtnNewDoc);
				rdbtnExDoc = new JRadioButton();
				g.add(rdbtnExDoc);
				rdbtnExDoc.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent e) 
					{
						panel_Input.setBounds(28, 162, 365, 70);

						rdbtnNewDoc.setEnabled(true);
						rdbtnExDoc.setEnabled(false);
						rdbtnSavePDF.setEnabled(true);

						lblEnterFilename.setVisible(false);
						textField_Filename.setVisible(false);
						textField_Filename.setText("");
						existingfilepath="";
						newFileName="";
						btnNewButton.setBackground(Color.WHITE);

						lblChooseFile.setVisible(true);
						btnNewButton.setVisible(true);
						btnNewButton.requestFocusInWindow();
						chckbxOverwriteSelectedFile.setVisible(false);

						btnDone.setEnabled(false);
					}
				});
				rdbtnExDoc.setText("Add to Existing Microsoft Word Document");
				rdbtnExDoc.setPreferredSize(new Dimension(390, 25));
				rdbtnExDoc.setFont(new Font("Tahoma", Font.BOLD, 16));
				rdbtnExDoc.setBounds(18, 80, 375, 35);
				SavePanel.add(rdbtnExDoc);

				rdbtnSavePDF = new JRadioButton("Save as PDF");
				g.add(rdbtnSavePDF);
				rdbtnSavePDF.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent e) 
					{
						panel_Input.setBounds(28, 162, 365, 70);
						dialog.setAlwaysOnTop(true);
						rdbtnNewDoc.setEnabled(true);
						rdbtnExDoc.setEnabled(true);
						rdbtnSavePDF.setEnabled(false);

						lblEnterFilename.setVisible(true);
						textField_Filename.setVisible(true);
						textField_Filename.requestFocusInWindow();

						textField_Filename.setText("");
						existingfilepath="";
						newFileName="";
						btnNewButton.setBackground(Color.WHITE);


						lblChooseFile.setVisible(false);
						btnNewButton.setVisible(false);
						chckbxOverwriteSelectedFile.setVisible(false);

						btnDone.setEnabled(false);
					}
				});
				rdbtnSavePDF.setPreferredSize(new Dimension(390, 25));
				rdbtnSavePDF.setFont(new Font("Tahoma", Font.BOLD, 16));
				rdbtnSavePDF.setBounds(18, 115, 130, 35);
				SavePanel.add(rdbtnSavePDF);

				panel_Input = new JPanel();
				panel_Input.setInheritsPopupMenu(true);
				panel_Input.setIgnoreRepaint(true);
				panel_Input.setFont(new Font("Tahoma", Font.PLAIN, 16));
				panel_Input.setBorder(new LineBorder(new Color(0, 0, 0)));
				panel_Input.setBackground(new Color(255, 255, 204));
				panel_Input.setBounds(28, 162, 365, 70);

				SavePanel.add(panel_Input);
				panel_Input.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));

				panel_1 = new JPanel();
				panel_1.setBackground(new Color(255, 255, 204));
				panel_Input.add(panel_1);

				lblChooseFile = new JLabel("Choose File:");
				panel_1.add(lblChooseFile);
				lblChooseFile.setVisible(false);
				lblChooseFile.setFont(new Font("Tahoma", Font.BOLD, 16));
				btnNewButton = new JButton();
				panel_1.add(btnNewButton);
				btnNewButton.setToolTipText("Choose file");
				btnNewButton.setBackground(Color.WHITE);
				btnNewButton.setVisible(false);
				btnNewButton.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent arg0) 
					{
						dialog.setAlwaysOnTop(false);
						FileDialog fileDialog = new FileDialog(new Frame(), "Choose File");
						fileDialog.setAlwaysOnTop(true);
						fileDialog.setFile("*.docx;*.doc");
						fileDialog.setVisible(true);
						existingfilepath = String.valueOf(fileDialog.getDirectory()) + fileDialog.getFile();
						dialog.setAlwaysOnTop(true);
						panel_Input.setBounds(28, 162, 365, 70);
						if (existingfilepath.equalsIgnoreCase("nullnull") || existingfilepath.equals("")) 
						{
							btnDone.setEnabled(false);
							chckbxOverwriteSelectedFile.setVisible(false);
							btnNewButton.setBackground(Color.pink);
							btnNewButton.requestFocusInWindow();
							dialog.setAlwaysOnTop(false);
							new PopUp("ERROR","Error","Please choose a file!!","Ok, I understood","");
							dialog.setAlwaysOnTop(true);
							lblEnterFilename.setVisible(false);
							textField_Filename.setVisible(false);
							textField_Filename.setText("");
						}
						else 
						{

							File file = new File(existingfilepath);
							if (!file.renameTo(file)) 
							{
								btnNewButton.setBackground(Color.YELLOW);
								dialog.setAlwaysOnTop(false);
								new PopUp("INFO","info","Selected file '"+file.getName()+"' "
										+ "is open for editing. To overwrite please close the file and select again. Otherwise enter filename to create a copy.",
										"Ok, I understood","");
								dialog.setAlwaysOnTop(true);
								chckbxOverwriteSelectedFile.setVisible(true);
								chckbxOverwriteSelectedFile.setSelected(false);
								chckbxOverwriteSelectedFile.setEnabled(false);
								panel_Input.setBounds(28, 153, 380, 92);
								textField_Filename.setColumns(15);
								lblEnterFilename.setVisible(true);
								textField_Filename.setVisible(true);
								textField_Filename.setText("");
								textField_Filename.requestFocusInWindow();
								btnDone.setEnabled(false);
							}
							else 
							{
								chckbxOverwriteSelectedFile.setVisible(true);
								chckbxOverwriteSelectedFile.setSelected(true);
								chckbxOverwriteSelectedFile.setEnabled(true);
								btnNewButton.setBackground(Color.GREEN);
								panel_Input.setBounds(28, 162, 365, 70);
								textField_Filename.setColumns(22);
								lblEnterFilename.setVisible(false);
								textField_Filename.setVisible(false);
								textField_Filename.setText("");
								btnDone.setEnabled(true);
							} 
						} 
					}
				});
				btnNewButton.setMargin(new Insets(2, 2, 2, 2));
				btnNewButton.setSize(new Dimension(20, 30));
				Dimension size = btnNewButton.getSize();
				try {
					BufferedImage master = ImageIO.read(new File("C:\\Users\\USER\\Desktop\\Icons\\Significon-Attachment-512.png"));
					Image scaled = master.getScaledInstance(size.width, size.height, java.awt.Image.SCALE_SMOOTH);
					btnNewButton.setIcon(new ImageIcon(scaled));
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}


				chckbxOverwriteSelectedFile = new JCheckBox("Overwrite selected file");
				chckbxOverwriteSelectedFile.setBackground(new Color(255, 255, 204));
				chckbxOverwriteSelectedFile.setSelected(true);
				chckbxOverwriteSelectedFile.setVisible(false);
				chckbxOverwriteSelectedFile.setFont(new Font("Tahoma", Font.PLAIN, 16));
				chckbxOverwriteSelectedFile.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent e) {
						if(chckbxOverwriteSelectedFile.isSelected())
						{
							panel_Input.setBounds(28, 162, 365, 70);
							textField_Filename.setColumns(22);
							lblEnterFilename.setVisible(false);
							textField_Filename.setVisible(false);
							textField_Filename.setText("");
							btnDone.setEnabled(true);
						}
						else
						{
							panel_Input.setBounds(28, 153, 380, 92);
							textField_Filename.setColumns(15);
							lblEnterFilename.setVisible(true);
							textField_Filename.setVisible(true);
							textField_Filename.setText("");
							textField_Filename.requestFocusInWindow();
							btnDone.setEnabled(false);
						}
					}
				});
				panel_Input.add(chckbxOverwriteSelectedFile);

				lblEnterFilename = new JLabel();
				lblEnterFilename.setText("Enter Filename :");
				panel_Input.add(lblEnterFilename);
				lblEnterFilename.setFont(new Font("Tahoma", Font.BOLD, 16));

				textField_Filename = new JTextField();
				panel_Input.add(textField_Filename);
				textField_Filename.setToolTipText("Enter Filename");
				textField_Filename.setFont(new Font("Tahoma", Font.PLAIN, 16));
				textField_Filename.setColumns(22);
				textField_Filename.getDocument().addDocumentListener(new DocumentListener()
				{
					public void changedUpdate(DocumentEvent e) {
					}
					public void insertUpdate(DocumentEvent e) {
						DocumentCheck("Insert");
					}
					public void removeUpdate(DocumentEvent e) {
						DocumentCheck("Remove");
					}
				});

				panel_Save_Buttons = new JPanel();
				panel_Save_Buttons.setBorder(new MatteBorder(0, 1, 1, 1, (Color) new Color(0, 0, 0)));
				panel_Save_Buttons.setBounds(12, 259, 413, 46);
				SaveScrollPane.add(panel_Save_Buttons);
				btnDone = new JButton("Okay");
				btnDone.setBackground(Color.BLUE);
				btnDone.setForeground(Color.BLACK);
				panel_Save_Buttons.add(btnDone);
				btnDone.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent arg0) {
						panel_Save_Buttons.setVisible(false);
						SavePanel.setVisible(false);
						label_1.setText("Please wait while we are creating your file.");
						panel_Progress.setBounds(12, 12, 413, 293);
						ProgressBar=new JCircularProgressBar().makeUI();
						ProgressBar.setBounds(110, 50, 200, 200);
						panel_Progress.add(ProgressBar);
						//SavePanel.setVisible(true);
					}
				});

				btnDone.setFont(new Font("Tahoma", Font.BOLD, 16));

				exitbtn = new JButton("Exit");
				exitbtn.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent e) {
						dialog.dispose();
						leaveControl=true;
					}
				});
				panel_Save_Buttons.add(exitbtn);
				exitbtn.setFont(new Font("Tahoma", Font.BOLD, 16));

				panel_Progress = new JPanel();
				panel_Progress.setBorder(new MatteBorder(1, 1, 1, 1, (Color) new Color(0, 0, 0)));
				panel_Progress.setBounds(12, 12, 413, 250);
				SaveScrollPane.add(panel_Progress);
				panel_Progress.setLayout(null);

				label_1 = new JLabel("");
				label_1.setBounds(28, 20, 373, 25);
				panel_Progress.add(label_1);
				label_1.setFont(new Font("Tahoma", Font.BOLD, 16));

			}

			SaveScrollPane.setSize(new Dimension(400, 200));
			TabbledPanel.addTab("", null, SaveScrollPane, null);
			TabbledPanel.setTitleAt(0, PRE_HTML + "Save" + POST_HTML);


			TabbledPanel.addTab("", null, new ViewPanel().ViewScrollPane, null);
			TabbledPanel.setTitleAt(1, PRE_HTML + "View\nImages" + POST_HTML);


			TabbledPanel.addTab("", null, new ManageDocumentPanel().DocumentScrollPane, null);
			TabbledPanel.setTitleAt(2, PRE_HTML + "Manage\nDocument" + POST_HTML);
			/**********
			 * 
			 * @Settings Panel
			 */


			TabbledPanel.addTab("", null, new SettingsPanel().SettingsPane, null);

			TabbledPanel.setTitleAt(3, PRE_HTML + "Settings" + POST_HTML);



			ActionPanel = new JPanel();
			ActionPanel.setBorder(new MatteBorder(1, 1, 1, 1, (Color) new Color(0, 0, 0)));
			ActionPanel.setBackground(Color.WHITE);
			ActionPanel.setLayout(null);

			panel_4 = new JPanel();
			panel_4.setBorder(new MatteBorder(1, 1, 1, 1, (Color) new Color(0, 0, 0)));
			panel_4.setBounds(12, 13, 405, 291);
			ActionPanel.add(panel_4);
			panel_4.setLayout(null);

			JTextArea txtrYouHaveNot = new JTextArea();
			txtrYouHaveNot.setLineWrap(true);
			txtrYouHaveNot.setWrapStyleWord(true);
			txtrYouHaveNot.setRows(5);
			txtrYouHaveNot.setBackground(UIManager.getColor("CheckBox.background"));
			txtrYouHaveNot.setFont(new Font("Tahoma", Font.BOLD, 16));
			txtrYouHaveNot.setText("You have not saved your previous work        before leaving the application.                                                                             Please select an option to continue");
			txtrYouHaveNot.setBounds(35, 23, 327, 90);
			panel_4.add(txtrYouHaveNot);

			rdbtnSavePreviousWork = new JRadioButton("Save previous work");
			buttonGroup_2.add(rdbtnSavePreviousWork);
			rdbtnSavePreviousWork.setSelected(true);
			rdbtnSavePreviousWork.setFont(new Font("Tahoma", Font.BOLD, 16));
			rdbtnSavePreviousWork.setBounds(66, 130, 187, 25);
			panel_4.add(rdbtnSavePreviousWork);

			rdbtnContinuePreviousWork = new JRadioButton("Continue previous work");
			buttonGroup_2.add(rdbtnContinuePreviousWork);
			rdbtnContinuePreviousWork.setFont(new Font("Tahoma", Font.BOLD, 16));
			rdbtnContinuePreviousWork.setBounds(66, 160, 250, 25);
			panel_4.add(rdbtnContinuePreviousWork);

			rdbtnDeletePreviousWork = new JRadioButton("Delete previous work");
			buttonGroup_2.add(rdbtnDeletePreviousWork);
			rdbtnDeletePreviousWork.setFont(new Font("Tahoma", Font.BOLD, 16));
			rdbtnDeletePreviousWork.setBounds(66, 190, 219, 25);
			panel_4.add(rdbtnDeletePreviousWork);

			JButton btnProceed = new JButton("Proceed ");
			btnProceed.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent arg0) {
					if(rdbtnSavePreviousWork.isSelected())
					{
						TabbledPanel.setEnabledAt(0, true);
						TabbledPanel.setSelectedIndex(0);
						btnDone.setEnabled(false);
						exitbtn.setEnabled(false);
						rdbtnNewDoc.setEnabled(false);
						textField_Filename.requestFocusInWindow();
					}
					else if(rdbtnContinuePreviousWork.isSelected())
					{
						dialog.dispose();
						leaveControl=true;
					}
					else
					{
						updateProperty(TempFilePath,"TempPath",createFolder(System.getProperty("user.dir")+"/CaptureEasy/Temp/")+new Random().nextInt(1000000000));
						dialog.dispose();
						leaveControl=true;
					}
				}
			});
			btnProceed.setFont(new Font("Tahoma", Font.BOLD, 16));
			btnProceed.setSelected(true);
			btnProceed.setBounds(144, 242, 110, 25);
			panel_4.add(btnProceed);
			TabbledPanel.setSelectedIndex(TabId);




		}

	}

	public void DocumentCheck(String ActionType)  
	{
		try{
			newFileName = textField_Filename.getText();
			if (newFileName.contains(Character.toString('"')) || newFileName.contains("/") || newFileName.contains("\\") || newFileName.contains(":") || newFileName.contains("*") || newFileName.contains("?") || newFileName.contains("<") || newFileName.contains(">") || newFileName.contains("|")) 
			{
				btnDone.setEnabled(false);
				textField_Filename.setBackground(Color.PINK);
				textField_Filename.requestFocusInWindow();
				if(ActionType.equalsIgnoreCase("Insert") && PopUp.control)
					new PopUp("ERROR","error", "A file name can not contain any of the following "
							+ "characters: \\ / : * ? " + Character.toString('"') + " < > | ","Ok, I understood","");
			}
			else if ((new File(String.valueOf(subFolders(getProperty(PropertyFilePath,"DocPath"))) + "\\" + newFileName + ".docx")).exists()) 
			{
				btnDone.setEnabled(false);
				textField_Filename.setBackground(Color.PINK);
				textField_Filename.requestFocusInWindow();
				if(ActionType.equalsIgnoreCase("Insert"))
				{
					dialog.setAlwaysOnTop(false);
					new PopUp("ERROR","error","There is already a file with the same name in "+new File(String.valueOf(subFolders(getProperty(PropertyFilePath,"DocPath"))) 
							+ "\\" + newFileName + ".docx").getParentFile()+" folder.","Ok, I understood","");
					dialog.setAlwaysOnTop(true);
				}

			}
			else 
			{
				btnDone.setEnabled(true);
				textField_Filename.setBackground(Color.WHITE);
				textField_Filename.requestFocusInWindow();
			}
			if(textField_Filename.getText().equalsIgnoreCase(""))
				btnDone.setEnabled(false);
		}catch(Exception e)
		{}

	}
	@Override
	public void mouseDragged(MouseEvent arg0) {
		int x = arg0.getXOnScreen();
		int y = arg0.getYOnScreen();
		dialog.setLocation(x - xx, y - xy); 		
	}

	@Override
	public void mousePressed(MouseEvent e) {
		xx = e.getX();
		xy = e.getY();
	}


	@Override
	public void mouseMoved(MouseEvent arg0) {}
	@Override
	public void mouseClicked(MouseEvent e) {}
	@Override
	public void mouseEntered(MouseEvent e) {}
	@Override
	public void mouseExited(MouseEvent e) {}
	@Override
	public void mouseReleased(MouseEvent e) {}
	boolean Bigflag=false;
	public JScrollPane scrollPane;
	public JButton SettingsPane_Btnpanel_SaveBtn;
	public JButton btnGo;
	public JButton exitbtn;
	public JCheckBox SettingsPane_Framepanel_ArrangeSS;
	public JCheckBox SettingsPane_Framepanel_AltPrtSc;
	public  JComboBox<?> comboBox_ImageFormat;
	public JPanel ActionPanel;
	public JPanel panel_4;
	private JRadioButton rdbtnSavePreviousWork;
	private JRadioButton rdbtnContinuePreviousWork;
	private JRadioButton rdbtnDeletePreviousWork;
	private final ButtonGroup buttonGroup_2 = new ButtonGroup();
	@Override
	public void stateChanged(ChangeEvent arg0) {
		if(TabbledPanel.getSelectedIndex()==0)	
		{
			/*textField_Filename.requestFocusInWindow();
			rdbtnNewDoc.setEnabled(false);
			btnDone.setEnabled(false);
			dialog.getRootPane().setDefaultButton(this.btnDone);
*/		}
		else if(TabbledPanel.getSelectedIndex()==1)
		{

		}
		else if(TabbledPanel.getSelectedIndex()==2)
		{

		}
		else
		{
			/*System.out.println("okkkk");

			String path=getProperty(PropertyFilePath,"DocPath");
			SettingsPane_DocFolderPanel_textField_DocDestFolder.setText(path);
			if(!"".equals(path))
			{
				SettingsPane_Framepanel_ArrangeSS.setSelected(Boolean.valueOf(getProperty(PropertyFilePath,"ArrangeSSDatewise")));
				comboBox_ImageFormat.setSelectedItem(getProperty(PropertyFilePath,"ImageFormat"));
				lblLocationx.setText("Location : ( "+getProperty(PropertyFilePath,"Xlocation")+" , "+getProperty(PropertyFilePath,"Ylocation")+" )");
			}
			SettingsPane_Framepanel_AltPrtSc.setSelected(Boolean.valueOf(getProperty(PropertyFilePath,"PrtSCSS")));
			//dialog.getRootPane().setDefaultButton(this.SettingsPane_Btnpanel_SaveBtn);
*/		}

	}
}